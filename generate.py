#!/usr/bin/env python3

import ast
import datetime
import logging
import os
import pprint

logging.basicConfig(level=logging.INFO, format="%(message)s")


def prepare_op_repo():
    """
    Prepare the openpilot repo
    """
    logging.info("Setting up openpilot repo.")

    os.system("git remote add commaai https://github.com/commaai/openpilot.git")
    os.system("git fetch commaai")

    logging.info("Done setting up openpilot repo.")


def generate_branch(branch_name):
    """
    Make a new branch using the RetroPilot API
    """

    logging.info("Generating branch %s", branch_name)

    # Make sure branch is clean
    os.system(f"git checkout -B {branch_name} commaai/{branch_name}")

    # Get date of current commit
    commit_date = os.popen("git log -1 --format=%cd --date=iso-strict").read()
    author_date = os.popen("git log -1 --format=%ad --date=iso-strict").read()

    # Append 'export API_HOST="retropilot.app"' to the end of launch_env.sh
    os.system("echo 'export API_HOST=\"retropilot.app\"' >> launch_env.sh")

    # Commit the changes
    os.system("git add launch_env.sh")
    os.system(f"GIT_AUTHOR_DATE='{author_date}' GIT_COMMITTER_DATE='{commit_date}' git commit -m 'Use RetroPilot API'")

    return branch_name


def generate_html(branches):
    # Generate a date for the page
    now = datetime.datetime.now()
    now_str = now.strftime("%Y-%m-%d %H:%M:%S UTC")

    header = """
<html>
<head>
<title>RetroPilot Fork Generator</title>
<style>
body {
    font-family: sans-serif;
}
</style>
</head>
<body>
<h1>RetroPilot Fork Generator</h1>
<p>
""" + f"""
This page was generated on {now_str}.
</p>
<p>
This is a list of all the branches generated by the <a href="https://github.com/dash-software-ltd/openpilot/">RetroPilot Fork Generator</a>.
</p>
<p>
Please see the <a href="https://github.com/dash-software-ltd/openpilot/">README for guidance and instructions</a>.
</p>
"""

    # Make it a nested list
    body = ""
    for branch in branches:
        body += f"<h2>{branch}</h2>"
        body += f"<ul>"
        body += f"<li>Custom Software URL: <code>https://installer.comma.ai/dash-software-ltd/{branch}</code></li>"
        body += f'<li><a href="https://github.com/dash-software-ltd/openpilot/tree/{branch}">View on GitHub</a></li>'
        body += f"</ul>"
    footer = """
</body>
</html>
"""
    # Make pages directory if it doesn't exist
    os.system("mkdir -p pages")
    with open("pages/index.html", "w") as f:
        f.write(header + body + footer)


def main(push=True):
    prepare_op_repo()

    branches = ["master-ci", "release3", "commatwo_master", "release2"]
    logging.info("branches:")
    logging.info(pprint.pformat(branches))

    # Generate branches
    for branch in branches:
        generate_branch(branch)

    # Generate HTML output
    generate_html(branches)

    if push:
        # Push branches
        logging.info("Pushing branches to origin")
        os.system("git remote -v")
        os.system("git branch -a")
        for branch in branches:
            os.system(f"git push origin {branch}")


if __name__ == "__main__":
    # Check if args has dry run, if so, don't push
    import sys

    if len(sys.argv) > 1 and sys.argv[1] == "--no-dry-run":
        main()
    else:
        main(push=False)
